// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using bizYeriz.Persistence.Context;

#nullable disable

namespace bizYeriz.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241215185114_food_orginalPrice_fix")]
    partial class food_orginalPrice_fix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("bizYeriz.Domain.Entities.AuthEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Gsm")
                        .HasColumnType("text")
                        .HasColumnName("Gsm");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDelete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AddressDetail");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("double precision")
                        .HasColumnName("AverageRating");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("City");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CompanyPhone");

                    b.Property<string>("CompanyTypeDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CompanyTypeDescription");

                    b.Property<string>("CompanyTypeImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CompanyTypeImageUrl");

                    b.Property<string>("CompanyTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CompanyTypeName");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("District");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<bool>("EnvironmentallyFriendly")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDelete");

                    b.Property<bool>("IsTrustworthy")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("Location");

                    b.Property<string>("MapUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MapUrl");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MobilePhone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Neighborhood");

                    b.Property<double>("RatingCount")
                        .HasColumnType("double precision")
                        .HasColumnName("RatingCount");

                    b.Property<double>("StarRating")
                        .HasColumnType("double precision")
                        .HasColumnName("StarRating");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Street");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Contents");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("Dislike")
                        .HasColumnType("boolean")
                        .HasColumnName("Dislike");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDelete");

                    b.Property<bool>("Like")
                        .HasColumnType("boolean")
                        .HasColumnName("Like");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("OrderId");

                    b.Property<double>("RatingCount")
                        .HasColumnType("double precision")
                        .HasColumnName("RatingCount");

                    b.Property<double>("StarRating")
                        .HasColumnType("double precision")
                        .HasColumnName("StarRating");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyComments", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyPaymentType", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.HasKey("CompanyId", "PaymentTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("CompanyPaymentType", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinimumPoint")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CompanyPoints");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CompanyUsers", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyWorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("interval")
                        .HasColumnName("ClosingTime");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("Day");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDelete");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("interval")
                        .HasColumnName("OpenTime");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyWorkingHours", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.MinOrderAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MinOrderAmounts");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CustomerEntities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CustomerEntities.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddreesDetail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AddreesDetail");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("City");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("CustomerAddressName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CustomerAddressName");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("District");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDelete");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Lat");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Long");

                    b.Property<string>("Neighbarhood")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Neighbarhood");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Street");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.CuisineCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CategoryName");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDelete");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CuisineCategories", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.CuisineCategoryAndFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CuisineCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CuisineCategoryId");

                    b.HasIndex("FoodId");

                    b.ToTable("CuisineCategoryAndFoods");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AvailableFrom");

                    b.Property<DateTime>("AvailableUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AvailableUntil");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<double>("DiscountedPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("DiscountedPrice");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("OriginalPrice");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("Stock");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Foods", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("OrderNumber");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories", (string)null);
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.FoodCategoryAndFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodCategoryAndFoods");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.OrderEntities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompanyCommentId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerAddressId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ShippingCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCommentId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerAddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.Company", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.CustomerEntities.Customer", null)
                        .WithMany("FavoriteCompany")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyComment", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.CompanyEntities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyPaymentType", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.CompanyEntities.Company", "Company")
                        .WithMany("CompanyPaymentTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bizYeriz.Domain.Entities.CompanyEntities.PaymentType", "PaymentType")
                        .WithMany("CompanyPaymentTypes")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyUser", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.CompanyEntities.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bizYeriz.Domain.Entities.AuthEntities.User", "User")
                        .WithOne("CompanyUser")
                        .HasForeignKey("bizYeriz.Domain.Entities.CompanyEntities.CompanyUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyWorkingHour", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.CompanyEntities.Company", "Company")
                        .WithMany("WorkingHours")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CustomerEntities.Customer", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.AuthEntities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("bizYeriz.Domain.Entities.CustomerEntities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CustomerEntities.CustomerAddress", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.CustomerEntities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.CuisineCategoryAndFood", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.FoodEntities.CuisineCategory", "CuisineCategory")
                        .WithMany("CuisineCategoryAndFoods")
                        .HasForeignKey("CuisineCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bizYeriz.Domain.Entities.FoodEntities.Food", "Food")
                        .WithMany("CuisineCategoryAndFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuisineCategory");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.Food", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.CompanyEntities.Company", "Company")
                        .WithMany("Foods")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bizYeriz.Domain.Entities.CustomerEntities.Customer", null)
                        .WithMany("FavoriteFood")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.FoodCategoryAndFood", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.FoodEntities.FoodCategory", "FoodCategory")
                        .WithMany("FoodCategoryAndFoods")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bizYeriz.Domain.Entities.FoodEntities.Food", "Food")
                        .WithMany("FoodCategoryAndFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("FoodCategory");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.OrderEntities.Order", b =>
                {
                    b.HasOne("bizYeriz.Domain.Entities.CompanyEntities.CompanyComment", "CompanyComment")
                        .WithOne("Order")
                        .HasForeignKey("bizYeriz.Domain.Entities.OrderEntities.Order", "CompanyCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bizYeriz.Domain.Entities.CompanyEntities.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bizYeriz.Domain.Entities.CustomerEntities.CustomerAddress", "CustomerAddress")
                        .WithMany()
                        .HasForeignKey("CustomerAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bizYeriz.Domain.Entities.CustomerEntities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyComment");

                    b.Navigation("Customer");

                    b.Navigation("CustomerAddress");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.AuthEntities.User", b =>
                {
                    b.Navigation("CompanyUser")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.Company", b =>
                {
                    b.Navigation("CompanyPaymentTypes");

                    b.Navigation("CompanyUsers");

                    b.Navigation("Foods");

                    b.Navigation("Orders");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.CompanyComment", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CompanyEntities.PaymentType", b =>
                {
                    b.Navigation("CompanyPaymentTypes");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.CustomerEntities.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("FavoriteCompany");

                    b.Navigation("FavoriteFood");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.CuisineCategory", b =>
                {
                    b.Navigation("CuisineCategoryAndFoods");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.Food", b =>
                {
                    b.Navigation("CuisineCategoryAndFoods");

                    b.Navigation("FoodCategoryAndFoods");
                });

            modelBuilder.Entity("bizYeriz.Domain.Entities.FoodEntities.FoodCategory", b =>
                {
                    b.Navigation("FoodCategoryAndFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
